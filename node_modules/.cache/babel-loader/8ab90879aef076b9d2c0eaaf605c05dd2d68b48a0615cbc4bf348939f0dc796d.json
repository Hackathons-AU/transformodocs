{"ast":null,"code":"var _jsxFileName = \"/home/tar_guest/transformdocs/src/components/ProveMRC.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Typography, Button, TextField, Snackbar, Alert } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProveMRC = () => {\n  _s();\n  const [code, setCode] = useState('');\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const handleCheck = () => {\n    // Logic to check if the code is machine-readable\n    if (code.trim()) {\n      if (isMachineReadable(code)) {\n        setResult('Yes, it is machine-readable code');\n        setError(null);\n      } else {\n        setResult('No, it is not machine-readable');\n        setError(null);\n      }\n    } else {\n      setError('Please enter some code to check.');\n      setResult(null);\n    }\n  };\n  const isMachineReadable = input => {\n    // Implement your logic to check machine-readability\n    return input.includes('MRC'); // Dummy logic for demo purposes\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    component: \"main\",\n    maxWidth: \"sm\",\n    style: {\n      marginTop: '2rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Prove MRC (Machine Readable Code)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      variant: \"outlined\",\n      label: \"Enter Code\",\n      value: code,\n      onChange: e => setCode(e.target.value),\n      margin: \"normal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleCheck,\n      style: {\n        marginTop: '1rem'\n      },\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), result && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      color: \"textPrimary\",\n      style: {\n        marginTop: '1rem'\n      },\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: true,\n      autoHideDuration: 6000,\n      onClose: () => setError(null),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(ProveMRC, \"mEzdByf5k9zq6YoC3k+XCTAPS88=\");\n_c = ProveMRC;\nexport default ProveMRC;\nvar _c;\n$RefreshReg$(_c, \"ProveMRC\");","map":{"version":3,"names":["React","useState","Container","Typography","Button","TextField","Snackbar","Alert","jsxDEV","_jsxDEV","ProveMRC","_s","code","setCode","result","setResult","error","setError","handleCheck","trim","isMachineReadable","input","includes","component","maxWidth","style","marginTop","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","fullWidth","label","value","onChange","e","target","margin","color","onClick","open","autoHideDuration","onClose","severity","_c","$RefreshReg$"],"sources":["/home/tar_guest/transformdocs/src/components/ProveMRC.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Container, Typography, Button, TextField, Snackbar, Alert } from '@mui/material';\n\nconst ProveMRC = () => {\n    const [code, setCode] = useState('');\n    const [result, setResult] = useState(null);\n    const [error, setError] = useState(null);\n\n    const handleCheck = () => {\n        // Logic to check if the code is machine-readable\n        if (code.trim()) {\n            if (isMachineReadable(code)) {\n                setResult('Yes, it is machine-readable code');\n                setError(null);\n            } else {\n                setResult('No, it is not machine-readable');\n                setError(null);\n            }\n        } else {\n            setError('Please enter some code to check.');\n            setResult(null);\n        }\n    };\n\n    const isMachineReadable = (input) => {\n        // Implement your logic to check machine-readability\n        return input.includes('MRC'); // Dummy logic for demo purposes\n    };\n\n    return (\n        <Container component=\"main\" maxWidth=\"sm\" style={{ marginTop: '2rem' }}>\n            <Typography variant=\"h4\" gutterBottom>\n                Prove MRC (Machine Readable Code)\n            </Typography>\n            <TextField\n                fullWidth\n                variant=\"outlined\"\n                label=\"Enter Code\"\n                value={code}\n                onChange={(e) => setCode(e.target.value)}\n                margin=\"normal\"\n            />\n            <Button\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleCheck}\n                style={{ marginTop: '1rem' }}\n            >\n                Check\n            </Button>\n            {result && (\n                <Typography variant=\"h6\" color=\"textPrimary\" style={{ marginTop: '1rem' }}>\n                    {result}\n                </Typography>\n            )}\n            {error && (\n                <Snackbar\n                    open={true}\n                    autoHideDuration={6000}\n                    onClose={() => setError(null)}\n                >\n                    <Alert severity=\"error\">\n                        {error}\n                    </Alert>\n                </Snackbar>\n            )}\n        </Container>\n    );\n};\n\nexport default ProveMRC;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}